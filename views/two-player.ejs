<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>2 Player</title>
    <link rel="stylesheet" href = "/stylesheets/hex-two-player.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <div class = grid-header> 
        <button class = "header" id = "home" onclick="window.location.href='/';">
            <span> HOME </span>
        </button>

    </div> 
    
    <div class = "spacing"> </div>
    <div class="grid" id = "grid">
            <p id="user-container"> You: <span id="user"></span> </p>
            <p id="opponent-container"> Opponent: <span id="opponent"></span> </p>
            <p id="color-assignment"> You are: <span id="color"></span></p>
            <p id="turn"><span id="curr"></span>'s Move</p>

            <input type="text" placeholder="Name" id="name" autocomplete="off">
            <button id="enterName">Enter your Name</button>
            <button class = "b_1" id="room1"><b class = "b_1">Join Room 1: </b><span class="b_1" id="r1">0/2</span></button>
            <button class = "b_2" id="room2"><b class = "b_2">Join Room 2: </b><span class="b_2" id="r2">0/2</span></button>
            <button class = "b_3" id="room3"><b class = "b_3">Join Room 3: </b><span class="b_3" id="r3">0/2</span></button>
            <button class = "b_4" id="room4"><b class = "b_4">Join Room 4: </b><span class="b_4" id="r4">0/2</span></button>
            <button class = "b_5" id="room5"><b class = "b_5">Join Room 5: </b><span class="b_5" id="r5">0/2</span></button>
            <button class = "b_6" id="room6"><b class = "b_6">Join Room 6: </b><span class="b_6" id="r6">0/2</span></button>

            <button class = "b_7" id="room7"><b class = "b_7">Join Waiting Room</b></button>
            <button class = "b_8" id="leaveGame"><b class = "util">Leave Game</b></button>
    </div>

</body>

<script>var exports = {};</script>
<script type="module" src = scripts/js/utility.js></script>

<script src="/socket.io/socket.io.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script type="module">

    import Board from "./scripts/js/Board.js";
    import Game from "./scripts/js/Game.js"
    import Handler from "./scripts/Handler.js"
    import {putUser, getUsers} from "./scripts/user.js"

    const socket = io();
    let board = new Board(socket);
    let game = new Game(board);
    let handler;
    let gameArr;

    var start_button = document.getElementById("start-button");

    /* START SIDEBAR SETUP*/
    let name;
    let joined_room = 0;
    let curr_room = -1;
    let gameStarted = 0;

    let color = null;
    

    let asyncButtonHandler;
    let startHandler;
    let opponent;

    document.getElementById("curr").innerText="Red";

    document.addEventListener("click", function(evt){

        let hasClicked = 0;
        let clicked_room = -1;

        if (evt.target.id === "enterName"){
            name = document.getElementById("name").value;
            document.getElementById("user").innerText=name;

            if (name == null || name == ''){
                alert("Enter a name in order to join a room")
            }
        }

        let i = 0;

        /* ROOMS ARE 1-INDEXEX AND WAITING ROOM IS ROOM 7 */
        while (i < 8){
            if (evt.target.matches(".b_" + i.toString())){
                hasClicked = 1;
                clicked_room = i
            }
            i += 1;
        }

        if (hasClicked === 1 && (name == null || name == '')){
            alert("Enter a name in order to join a room")
        }
        else{
            let room_num = evt.target.className.split('_')[1];
            let numerator = parseInt(document.getElementById("r" + room_num)?.innerText?.split("/")[0]);

            //Can only leave a room if the game hasn't started
            if (hasClicked && curr_room == clicked_room && gameStarted == 0){
                numerator -= 1;
                alert("You have left room " + room_num)
                document.getElementById("r" + room_num).innerText = numerator.toString() + "/2"; 
                joined_room = 0
                curr_room = -1;

                socket.emit("playerLeftRoom", room_num, name)
            }
            else if (hasClicked === 1){

                if (joined_room === 1 && gameStarted){
                    alert("Leave the game to join another room.")
                }
                else if (joined_room === 1){
                    alert("You can only join 1 room at a time. Click on your current room to leave it.")
                }
                else{
                    joined_room = 1;
                    curr_room = clicked_room;
                    
                    numerator += 1;
 
                    /* Rely on server to make changes to room numbers */
                    socket.emit('join', room_num, name)
                   
                }
            }
        }

        console.log(evt.target.id)

        if (evt.target.id === "leaveGame"){
            socket.emit("leaveGame", curr_room.toString(), name);
        }

        //event delegation instead of a separate handler for the grid
        if (gameStarted){
            asyncButtonHandler(evt);
        }

        evt.stopPropagation;
    })

    /* END SIDEBAR SETUP*/
    
    // room_num is a string
    socket.on("roomJoined", (room_num) => {

        let numerator = parseInt(document.getElementById("r" + room_num)?.innerText?.split("/")[0]);
        
        // numerator should always be 0 or 1 but it's still good to check
        if (numerator === 0 || numerator === 1){
            numerator += 1;
            document.getElementById("r" + room_num.toString()).innerText = numerator.toString() + "/2";
        }
    });

    socket.on("roomLeft", (room_num) => {
        let numerator = parseInt(document.getElementById("r" + room_num)?.innerText?.split("/")[0]);
        
        // numerator should always be 1 or 2 but it's still good to check
        if (numerator === 1 || numerator === 2){
            numerator -= 1;
            document.getElementById("r" + room_num.toString()).innerText = numerator.toString() + "/2";
        }
    });


    socket.on("gameStarted", (players) => { 
        //alert("The game has started!")
        
        gameStarted = 1;
        console.log("gameStarted", players);
        const my_index = players.map(e => e.user_name).indexOf(name);

        opponent = players[1 - my_index].user_name;
        color = players[my_index].color;

        game.color = color;

        handler = new Handler(board, game, curr_room.toString());

        asyncButtonHandler = handler.getAsyncButtonHandler(game.color);
        startHandler = handler.getStartHandler(true);

        startHandler();

        document.getElementById("opponent").innerText=opponent;
        document.getElementById("color").innerText = game.color;
        document.getElementById("leaveGame").style.visibility = 'visible';

    })

    socket.on("colorChange", (e) => {
        let row = e.row
        let col = e.col;
        let newColor = e.myColor;
        
        if (newColor === "red"){
            document.getElementById("curr").innerText="Blue";
        }
        else{
            document.getElementById("curr").innerText="Red";
        }   
        game.turn += 1

        board.changeColor(row, col, newColor)
    })

    socket.on("playerLeft", (room_num, player) => {
        alert("Game is over. \"" + player + "\" has left.")

        //RESET PARAMS; will create function for initialization later
        gameStarted = 0;
        curr_room = -1;
        joined_room = 0;
        color = null;
        
        document.getElementById("color").innerText = "";
        document.getElementById("opponent").innerText = "";

        document.getElementById("leaveGame").style.visibility = "hidden";
        document.getElementById("r" + room_num).innerText = "0/2";

        startHandler();

        socket.emit("getTurn");

        console.log("received playerLeft")
    });

    socket.on("disconnect", () => {
        console.log("disconnect")
        if (gameStarted){
            socket.emit("leaveGame", curr_room.toString(), name);
        }
    });

    /* 
    Get the data about rooms whenever a new user connects
    */

    socket.on("connect", () => {
        socket.emit("getTurn");
        console.log("sent getTurn")
    })

    socket.on("rooms", (rooms) => {
        console.log("test")
        let i = 1;
        while (i < 7){
            document.getElementById("r" + i.toString()).innerText = rooms[i-1].toString() + "/2";
            i += 1;
        }
    });

</script>